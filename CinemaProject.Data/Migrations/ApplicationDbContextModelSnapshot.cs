// <auto-generated />
using System;
using CinemaProject.Data.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaProject.Data.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cartId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("endAt");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("paymentType")
                        .IsFixedLength();

                    b.Property<long?>("PromocodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("promocodeId");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("totalPrice");

                    b.HasKey("CartId", "UserId");

                    b.HasIndex("PromocodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.CartProduct", b =>
                {
                    b.Property<long>("CartProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("cartProductId");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cartId");

                    b.HasKey("CartProductId", "ProductId", "UserId", "CartId")
                        .HasName("PK_CartProducts_1");

                    b.HasIndex("ProductId");

                    b.HasIndex("CartId", "UserId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("categoryDescription")
                        .IsFixedLength();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("categoryName")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cinema", b =>
                {
                    b.Property<long>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cinemaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CinemaId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.HasKey("CinemaId");

                    b.HasIndex("CityId");

                    b.ToTable("Cinema");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("cityName")
                        .IsFixedLength();

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Demonstration", b =>
                {
                    b.Property<long>("DemonstrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("demonstrationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DemonstrationId"), 1L, 1);

                    b.Property<double>("Cof")
                        .HasColumnType("float")
                        .HasColumnName("cof");

                    b.Property<string>("DemonstrationName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("demonstrationName")
                        .IsFixedLength();

                    b.HasKey("DemonstrationId");

                    b.ToTable("Demonstration");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Hall", b =>
                {
                    b.Property<long>("HallId")
                        .HasColumnType("bigint")
                        .HasColumnName("hallId");

                    b.Property<long>("CinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cinemaId");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("format")
                        .IsFixedLength();

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("hallName")
                        .IsFixedLength();

                    b.Property<long>("HallSeatsNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("hallSeatsNumber");

                    b.HasKey("HallId", "CinemaId");

                    b.HasIndex("CinemaId");

                    b.ToTable("Hall");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("cityId");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("district")
                        .IsFixedLength();

                    b.Property<string>("St")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("st")
                        .IsFixedLength();

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Movie", b =>
                {
                    b.Property<long>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("movieId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MovieId"), 1L, 1);

                    b.Property<int>("AgeRestriction")
                        .HasColumnType("int")
                        .HasColumnName("ageRestriction");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.Property<string>("MovieDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("movieDescription")
                        .IsFixedLength();

                    b.Property<string>("MoviePhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("moviePhotoPath");

                    b.Property<string>("MoviePreviewPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("moviePreviewPath");

                    b.Property<string>("MovieTrailerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movieTrailerPath");

                    b.Property<string>("NameMovie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("nameMovie")
                        .IsFixedLength();

                    b.HasKey("MovieId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.MovieRating", b =>
                {
                    b.Property<long>("MovieRattingtId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieRattingtId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieId");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("char(1000)")
                        .HasColumnName("comment")
                        .IsFixedLength();

                    b.Property<double>("Mark")
                        .HasColumnType("float")
                        .HasColumnName("mark");

                    b.HasKey("MovieRattingtId", "UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieRating");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.MovieSubcategory", b =>
                {
                    b.Property<long>("MovieSubcategoriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieSubcategoriesId");

                    b.Property<long>("SubcategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("subcategoryId");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieId");

                    b.HasKey("MovieSubcategoriesId", "SubcategoryId", "MovieId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("MovieSubcategories");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("permissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PermissionId"), 1L, 1);

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nchar(40)")
                        .HasColumnName("permissionDescription")
                        .IsFixedLength();

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("permissionName")
                        .IsFixedLength();

                    b.HasKey("PermissionId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("productId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"), 1L, 1);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("productName")
                        .IsFixedLength();

                    b.Property<string>("ProductPhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("productPrice");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Promocode", b =>
                {
                    b.Property<long>("PromocodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("promocodeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PromocodeId"), 1L, 1);

                    b.Property<int>("CountUse")
                        .HasColumnType("int")
                        .HasColumnName("countUse");

                    b.Property<string>("PromocodeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("promocodeDescription")
                        .IsFixedLength();

                    b.Property<string>("PromocodeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("promocodeName")
                        .IsFixedLength();

                    b.HasKey("PromocodeId");

                    b.ToTable("Promocode");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Reciept", b =>
                {
                    b.Property<long>("RecieptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("recieptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecieptId"), 1L, 1);

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .HasColumnName("paymentType")
                        .IsFixedLength();

                    b.Property<string>("TotalPrice")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("totalPrice")
                        .IsFixedLength();

                    b.HasKey("RecieptId");

                    b.ToTable("Reciept");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.ReservedTicket", b =>
                {
                    b.Property<long>("ReservedTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reservedTicketId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReservedTicketId"), 1L, 1);

                    b.HasKey("ReservedTicketId");

                    b.ToTable("reservedTicket");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("roleDescription")
                        .IsFixedLength();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("roleName")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Seat", b =>
                {
                    b.Property<long>("SeatId")
                        .HasColumnType("bigint")
                        .HasColumnName("seatId");

                    b.Property<long>("HallId")
                        .HasColumnType("bigint")
                        .HasColumnName("hallId");

                    b.Property<long>("CinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cinemaId");

                    b.Property<bool>("Class")
                        .HasColumnType("bit")
                        .HasColumnName("class");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int")
                        .HasColumnName("seatNumber");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int")
                        .HasColumnName("seatRow");

                    b.HasKey("SeatId", "HallId", "CinemaId");

                    b.HasIndex("HallId", "CinemaId");

                    b.HasIndex(new[] { "SeatId", "HallId" }, "FK_Seat")
                        .IsUnique();

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sessionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"), 1L, 1);

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieId");

                    b.Property<long>("HallId")
                        .HasColumnType("bigint")
                        .HasColumnName("hallId");

                    b.Property<long>("DemonstrationId")
                        .HasColumnType("bigint")
                        .HasColumnName("demonstrationId");

                    b.Property<long>("CinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("CinemaId");

                    b.Property<DateTime>("ScreenEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("screenEnd");

                    b.Property<DateTime>("ScreenStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("screenStart");

                    b.HasKey("SessionId", "MovieId", "HallId", "DemonstrationId")
                        .HasName("PK_Session_1");

                    b.HasIndex("DemonstrationId");

                    b.HasIndex("MovieId");

                    b.HasIndex("HallId", "CinemaId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Subcategory", b =>
                {
                    b.Property<long>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("subcategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubcategoryId"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("categoryId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("date")
                        .HasColumnName("createAt");

                    b.Property<string>("SubcategoryDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("subcategoryDescription")
                        .IsFixedLength();

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("subcategoryName")
                        .IsFixedLength();

                    b.HasKey("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategory");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Ticket", b =>
                {
                    b.Property<long>("TicketId")
                        .HasColumnType("bigint")
                        .HasColumnName("ticketId");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint")
                        .HasColumnName("seatId");

                    b.Property<long>("HallId")
                        .HasColumnType("bigint")
                        .HasColumnName("hallId");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("sessionId");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movieId");

                    b.Property<long>("CinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cinemaId");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cartId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.Property<long>("DemonstrationId")
                        .HasColumnType("bigint")
                        .HasColumnName("demonstrationId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("createdAt");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("float")
                        .HasColumnName("ticketPrice");

                    b.HasKey("TicketId", "SeatId", "HallId", "SessionId", "MovieId", "CinemaId", "CartId", "UserId", "DemonstrationId");

                    b.HasIndex("CartId", "UserId");

                    b.HasIndex("SeatId", "HallId");

                    b.HasIndex("SessionId", "MovieId", "HallId", "DemonstrationId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("userEmail")
                        .IsFixedLength();

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nchar(256)")
                        .IsFixedLength();

                    b.Property<string>("UserPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("userPassword")
                        .IsFixedLength();

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("userSurname")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cart", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Promocode", "Promocode")
                        .WithMany("Carts")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_Cart_Promocode");

                    b.HasOne("CinemaProject.Data.Models.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("Promocode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.CartProduct", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProducts_Product");

                    b.HasOne("CinemaProject.Data.Models.Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProducts_Cart");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cinema", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.City", "City")
                        .WithMany("Cinemas")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Cinema_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Hall", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Hall_Cinema");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Location", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.MovieRating", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Movie", "Movie")
                        .WithMany("MovieRatings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieRating_Movie");

                    b.HasOne("CinemaProject.Data.Models.Entities.User", "User")
                        .WithMany("MovieRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieRating_User");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.MovieSubcategory", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Movie", "Movie")
                        .WithMany("MovieSubcategories")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieSubcategories_Movie");

                    b.HasOne("CinemaProject.Data.Models.Entities.Subcategory", "Subcategory")
                        .WithMany("MovieSubcategories")
                        .HasForeignKey("SubcategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieSubcategories_Subcategory");

                    b.Navigation("Movie");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Seat", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId", "CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Seat_Hall");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Session", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Demonstration", "Demonstration")
                        .WithMany("Sessions")
                        .HasForeignKey("DemonstrationId")
                        .IsRequired()
                        .HasConstraintName("FK_Session_Demonstration");

                    b.HasOne("CinemaProject.Data.Models.Entities.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Session_Movie");

                    b.HasOne("CinemaProject.Data.Models.Entities.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallId", "CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Session_Hall");

                    b.Navigation("Demonstration");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Subcategory", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Subcategory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Ticket", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Cart", "Cart")
                        .WithMany("Tickets")
                        .HasForeignKey("CartId", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Cart");

                    b.HasOne("CinemaProject.Data.Models.Entities.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId", "HallId")
                        .HasPrincipalKey("SeatId", "HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Seat1");

                    b.HasOne("CinemaProject.Data.Models.Entities.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId", "MovieId", "HallId", "DemonstrationId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Session1");

                    b.Navigation("Cart");

                    b.Navigation("Seat");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaProject.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("CinemaProject.Data.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cart", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Cinema", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.City", b =>
                {
                    b.Navigation("Cinemas");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Demonstration", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Hall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Movie", b =>
                {
                    b.Navigation("MovieRatings");

                    b.Navigation("MovieSubcategories");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Product", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Promocode", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Session", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.Subcategory", b =>
                {
                    b.Navigation("MovieSubcategories");
                });

            modelBuilder.Entity("CinemaProject.Data.Models.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("MovieRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
